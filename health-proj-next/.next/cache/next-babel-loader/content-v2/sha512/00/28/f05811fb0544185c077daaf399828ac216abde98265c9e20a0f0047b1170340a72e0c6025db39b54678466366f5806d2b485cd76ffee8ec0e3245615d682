{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Bruno\\\\Documents\\\\reactjs\\\\healthy-pomodoro\\\\health-proj-next\\\\src\\\\contexts\\\\CountdownContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { ChallengesContext } from './ChallengesContext';\nexport const CountdownContext = /*#__PURE__*/createContext({});\nlet countdownTimeout;\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(25 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function StartCountdown() {\n    setIsActive(true);\n  }\n\n  function ResetCountdown() {\n    setIsActive(false);\n    clearTimeout(countdownTimeout);\n    setTime(25 * 60);\n    setHasFinished(false);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      StartCountdown,\n      ResetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/Bruno/Documents/reactjs/healthy-pomodoro/health-proj-next/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","StartCountdown","ResetCountdown","clearTimeout","setTimeout"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAeA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,IAAIM,gBAAJ;AAEA,OAAO,SAASC,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAiE;AACpE,QAAM;AAAEC,IAAAA;AAAF,MAAwBR,UAAU,CAACG,iBAAD,CAAxC;AAEA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAkBR,QAAQ,CAAC,KAAK,EAAN,CAAhC;AACA,QAAM;AAAA,OAACS,QAAD;AAAA,OAAWC;AAAX,MAA0BV,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACW,WAAD;AAAA,OAAcC;AAAd,MAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMa,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACtBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AAED,WAASQ,cAAT,GAA0B;AACtBR,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAS,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAK,IAAAA,OAAO,CAAC,KAAK,EAAN,CAAP;AACAI,IAAAA,cAAc,CAAC,KAAD,CAAd;AACH;;AAEDb,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACtBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,MAAM;AAChCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAF4B,EAE1B,IAF0B,CAA7B;AAGH,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,IAAI,CAAxB,EAA2B;AAC9BK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AACpB;AACJ,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC9BM,MAAAA,OAD8B;AAE9BG,MAAAA,OAF8B;AAG9BL,MAAAA,WAH8B;AAI9BF,MAAAA,QAJ8B;AAK9BQ,MAAAA,cAL8B;AAM9BC,MAAAA;AAN8B,KAAlC;AAAA,cAQKb;AARL;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from 'react'\r\nimport { ChallengesContext } from './ChallengesContext'\r\n\r\ninterface CountdownContextData {\r\n    minutes: number;\r\n    seconds: number;\r\n    hasFinished: boolean;\r\n    isActive: boolean;\r\n    StartCountdown: () => void;\r\n    ResetCountdown: () => void;\r\n}\r\n\r\ninterface CountdownProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const CountdownContext = createContext({} as CountdownContextData)\r\n\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nexport function CountdownProvider({ children }: CountdownProviderProps) {\r\n    const { startNewChallenge } = useContext(ChallengesContext);\r\n\r\n    const [time, setTime] = useState(25 * 60);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [hasFinished, setHasFinished] = useState(false);\r\n\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = time % 60;\r\n\r\n    function StartCountdown() {\r\n        setIsActive(true);\r\n    }\r\n\r\n    function ResetCountdown() {\r\n        setIsActive(false);\r\n        clearTimeout(countdownTimeout);\r\n        setTime(25 * 60);\r\n        setHasFinished(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isActive && time > 0) {\r\n            countdownTimeout = setTimeout(() => {\r\n                setTime(time - 1);\r\n            }, 1000)\r\n        } else if (isActive && time == 0) {\r\n            setHasFinished(true);\r\n            setIsActive(false);\r\n            startNewChallenge();\r\n        }\r\n    }, [isActive, time])\r\n\r\n    return (\r\n        <CountdownContext.Provider value={{\r\n            minutes,\r\n            seconds,\r\n            hasFinished,\r\n            isActive,\r\n            StartCountdown,\r\n            ResetCountdown\r\n        }}>\r\n            {children}\r\n        </CountdownContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}